============================= test session starts ==============================
platform linux -- Python 3.13.3, pytest-8.4.1, pluggy-1.6.0 -- /home/loki/documents/coding/is601/midterm/venv/bin/python3
cachedir: .pytest_cache
rootdir: /home/loki/documents/coding/is601/midterm
plugins: cov-6.2.1
collecting ... collected 21 items

tests/test_calculator.py::test_calculate_expression FAILED               [  4%]
tests/test_calculator.py::test_ans_reference FAILED                      [  9%]
tests/test_calculator.py::test_invalid_ans_reference FAILED              [ 14%]
tests/test_calculator.py::test_save_history PASSED                       [ 19%]
tests/test_calculator.py::test_load_history_failure PASSED               [ 23%]
tests/test_calculator_with_mock.py::test_calculate_expression FAILED     [ 28%]
tests/test_calculator_with_mock.py::test_ans_reference FAILED            [ 33%]
tests/test_calculator_with_mock.py::test_invalid_ans_reference FAILED    [ 38%]
tests/test_calculator_with_mock.py::test_save_history PASSED             [ 42%]
tests/test_calculator_with_mock.py::test_load_history_failure PASSED     [ 47%]
tests/test_calculator_with_mock.py::test_invalid_operator FAILED         [ 52%]
tests/test_calculator_with_mock.py::test_mixed_precedence FAILED         [ 57%]
tests/test_calculator_with_mock.py::test_invalid_format_empty_input FAILED [ 61%]
tests/test_calculator_with_mock.py::test_invalid_first_token FAILED      [ 66%]
tests/test_memento.py::test_load_history PASSED                          [ 71%]
tests/test_memento.py::test_load_history_invalid_json PASSED             [ 76%]
tests/test_memento.py::test_load_history_missing_file PASSED             [ 80%]
tests/test_memento.py::test_load_history_permission_error PASSED         [ 85%]
tests/test_memento.py::test_save_calculation_group PASSED                [ 90%]
tests/test_memento.py::test_save_calculation_group_permission_error PASSED [ 95%]
tests/test_memento.py::test_load_history_missing_steps_column PASSED     [100%]

=================================== FAILURES ===================================
__________________________ test_calculate_expression ___________________________

mock_history = <MagicMock name='CalculationHistory()' id='138655699797056'>

    def test_calculate_expression(mock_history):
        # Configure mock to simulate saving a calculation
        mock_history.get_history.return_value = pd.DataFrame([
            {'input': '1 + 2', 'result': 3.0, 'timestamp': '2025-06-30T17:30:56.123456',
             'steps': [{'input': '1 + 2', 'operation': '+', 'a': 1.0, 'b': 2.0, 'result': 3.0}]}
        ])
        mock_history.get_previous_result.side_effect = lambda n: 3.0 if n == 1 else HistoryError("Invalid index")
    
        # Test a simple calculation
        result = calculate_expression("1 + 2")
        assert result == 3.0
>       mock_history.save_calculation_group.assert_called_once()

tests/test_calculator.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='CalculationHistory().save_calculation_group' id='138655699797728'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'save_calculation_group' to have been called once. Called 0 times.

/usr/lib/python3.13/unittest/mock.py:958: AssertionError
------------------------------ Captured log call -------------------------------
DEBUG    calculator:calculator.py:55 User entered input: 1 + 2
DEBUG    calculator:calculator.py:69 Initial result: 1.0
DEBUG    calculator:calculator.py:90 Set precedence group to 1
DEBUG    calculator:calculator.py:101 Processing + 2.0
DEBUG    calculator:calculator.py:109 Current result: 3.0
INFO     memento:memento.py:83 Saved calculation group to /home/loki/documents/coding/is601/midterm/logs/calculation_history.csv: {'input': '1 + 2', 'result': 3.0, 'timestamp': '2025-06-30T17:55:58.497324', 'steps': '[{"input": "1 + 2", "operation": "+", "a": 1.0, "b": 2.0, "result": 3.0}]'}
INFO     calculator:calculator.py:122 Final calculation result: 3.0
______________________________ test_ans_reference ______________________________

mock_history = <MagicMock name='CalculationHistory()' id='138655699803104'>

    def test_ans_reference(mock_history):
        # Simulate a previous result
        mock_history.get_history.return_value = pd.DataFrame([
            {'input': '1 + 2', 'result': 3.0, 'timestamp': '2025-06-30T17:30:56.123456',
             'steps': [{'input': '1 + 2', 'operation': '+', 'a': 1.0, 'b': 2.0, 'result': 3.0}]}
        ])
        mock_history.get_previous_result.side_effect = lambda n: 3.0 if n == 1 else HistoryError("Invalid index")
    
        # Test using ans(1)
        result = calculate_expression("ans(1) * 2")
        assert result == 6.0
>       mock_history.get_previous_result.assert_called_once_with(1)

tests/test_calculator.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='CalculationHistory().get_previous_result' id='138655699805456'>
args = (1,), kwargs = {}
msg = "Expected 'get_previous_result' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'get_previous_result' to be called once. Called 0 times.

/usr/lib/python3.13/unittest/mock.py:990: AssertionError
------------------------------ Captured log call -------------------------------
DEBUG    calculator:calculator.py:55 User entered input: ans(1) * 2
DEBUG    memento:memento.py:105 Retrieved previous result (ans(1)): 3.0
DEBUG    calculator:calculator.py:69 Initial result: 3.0
DEBUG    calculator:calculator.py:90 Set precedence group to 2
DEBUG    calculator:calculator.py:101 Processing * 2.0
DEBUG    calculator:calculator.py:109 Current result: 6.0
DEBUG    memento:memento.py:105 Retrieved previous result (ans(1)): 3.0
INFO     memento:memento.py:83 Saved calculation group to /home/loki/documents/coding/is601/midterm/logs/calculation_history.csv: {'input': 'ans(1) * 2', 'result': np.float64(6.0), 'timestamp': '2025-06-30T17:55:58.598692', 'steps': '[{"input": "ans(1) (3.0) * 2", "operation": "*", "a": 3.0, "b": 2.0, "result": 6.0}]'}
INFO     calculator:calculator.py:122 Final calculation result: 6.0
__________________________ test_invalid_ans_reference __________________________

mock_history = <MagicMock name='CalculationHistory()' id='138655699806128'>

    def test_invalid_ans_reference(mock_history):
        mock_history.get_history.return_value = pd.DataFrame(columns=['input', 'result', 'timestamp', 'steps'])
        mock_history.get_previous_result.side_effect = HistoryError("No previous calculations available")
    
>       with pytest.raises(HistoryError, match="No previous calculations available"):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       Failed: DID NOT RAISE <class 'app.exceptions.HistoryError'>

tests/test_calculator.py:58: Failed
------------------------------ Captured log call -------------------------------
DEBUG    calculator:calculator.py:55 User entered input: ans(1) + 2
DEBUG    memento:memento.py:105 Retrieved previous result (ans(1)): 3.0
DEBUG    calculator:calculator.py:69 Initial result: 3.0
DEBUG    calculator:calculator.py:90 Set precedence group to 1
DEBUG    calculator:calculator.py:101 Processing + 2.0
DEBUG    calculator:calculator.py:109 Current result: 5.0
DEBUG    memento:memento.py:105 Retrieved previous result (ans(1)): 3.0
INFO     memento:memento.py:83 Saved calculation group to /home/loki/documents/coding/is601/midterm/logs/calculation_history.csv: {'input': 'ans(1) + 2', 'result': np.float64(5.0), 'timestamp': '2025-06-30T17:55:58.671380', 'steps': '[{"input": "ans(1) (3.0) + 2", "operation": "+", "a": 3.0, "b": 2.0, "result": 5.0}]'}
INFO     calculator:calculator.py:122 Final calculation result: 5.0
__________________________ test_calculate_expression ___________________________

mock_history = <MagicMock name='CalculationHistory()' id='138655699811504'>

    def test_calculate_expression(mock_history):
        mock_history.get_history.return_value = pd.DataFrame([
            {'input': '1 + 2', 'result': 3.0, 'timestamp': '2025-06-30T17:50:56.123456',
             'steps': [{'input': '1 + 2', 'operation': '+', 'a': 1.0, 'b': 2.0, 'result': 3.0}]}
        ])
        mock_history.get_previous_result.side_effect = lambda n: 3.0 if n == 1 else HistoryError("Invalid index")
        result = calculate_expression("1 + 2")
        assert result == 3.0
>       mock_history.save_calculation_group.assert_called_once()

tests/test_calculator_with_mock.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='CalculationHistory().save_calculation_group' id='138655699810496'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'save_calculation_group' to have been called once. Called 0 times.

/usr/lib/python3.13/unittest/mock.py:958: AssertionError
------------------------------ Captured log call -------------------------------
DEBUG    calculator:calculator.py:55 User entered input: 1 + 2
DEBUG    calculator:calculator.py:69 Initial result: 1.0
DEBUG    calculator:calculator.py:90 Set precedence group to 1
DEBUG    calculator:calculator.py:101 Processing + 2.0
DEBUG    calculator:calculator.py:109 Current result: 3.0
INFO     memento:memento.py:83 Saved calculation group to /home/loki/documents/coding/is601/midterm/logs/calculation_history.csv: {'input': '1 + 2', 'result': 3.0, 'timestamp': '2025-06-30T17:55:58.688916', 'steps': '[{"input": "1 + 2", "operation": "+", "a": 1.0, "b": 2.0, "result": 3.0}]'}
INFO     calculator:calculator.py:122 Final calculation result: 3.0
______________________________ test_ans_reference ______________________________

mock_history = <MagicMock name='CalculationHistory()' id='138655699809824'>

    def test_ans_reference(mock_history):
        mock_history.get_history.return_value = pd.DataFrame([
            {'input': '1 + 2', 'result': 3.0, 'timestamp': '2025-06-30T17:50:56.123456',
             'steps': [{'input': '1 + 2', 'operation': '+', 'a': 1.0, 'b': 2.0, 'result': 3.0}]}
        ])
        mock_history.get_previous_result.side_effect = lambda n: 3.0 if n == 1 else HistoryError("Invalid index")
        result = calculate_expression("ans(1) * 2")
        assert result == 6.0
>       mock_history.get_previous_result.assert_called_once_with(1)

tests/test_calculator_with_mock.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='CalculationHistory().get_previous_result' id='138655699808144'>
args = (1,), kwargs = {}
msg = "Expected 'get_previous_result' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'get_previous_result' to be called once. Called 0 times.

/usr/lib/python3.13/unittest/mock.py:990: AssertionError
------------------------------ Captured log call -------------------------------
DEBUG    calculator:calculator.py:55 User entered input: ans(1) * 2
DEBUG    memento:memento.py:105 Retrieved previous result (ans(1)): 3.0
DEBUG    calculator:calculator.py:69 Initial result: 3.0
DEBUG    calculator:calculator.py:90 Set precedence group to 2
DEBUG    calculator:calculator.py:101 Processing * 2.0
DEBUG    calculator:calculator.py:109 Current result: 6.0
DEBUG    memento:memento.py:105 Retrieved previous result (ans(1)): 3.0
INFO     memento:memento.py:83 Saved calculation group to /home/loki/documents/coding/is601/midterm/logs/calculation_history.csv: {'input': 'ans(1) * 2', 'result': np.float64(6.0), 'timestamp': '2025-06-30T17:55:58.760526', 'steps': '[{"input": "ans(1) (3.0) * 2", "operation": "*", "a": 3.0, "b": 2.0, "result": 6.0}]'}
INFO     calculator:calculator.py:122 Final calculation result: 6.0
__________________________ test_invalid_ans_reference __________________________

mock_history = <MagicMock name='CalculationHistory()' id='138655699806128'>

    def test_invalid_ans_reference(mock_history):
        # Ensure history is empty
        mock_history.get_history.return_value = pd.DataFrame(columns=['input', 'result', 'timestamp', 'steps'])
        mock_history.get_previous_result.side_effect = HistoryError("No previous calculations available")
        with patch("app.calculator.history", mock_history):
>           with pytest.raises(HistoryError, match="No previous calculations available"):
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           Failed: DID NOT RAISE <class 'app.exceptions.HistoryError'>

tests/test_calculator_with_mock.py:48: Failed
----------------------------- Captured stdout call -----------------------------
Invalid input: No previous calculations available
Please use format: number operator number [operator number]..., where number can be a number or ans(n)
Supported operators: +, -, --, *, /, %, /%, //, ^, ?
Precedence groups: +,-,-- (group 1); *,/,%/%,// (group 2); ^,? (group 3)
Examples: '1 + 2 - 3', 'ans(1) * 2', 'ans + 5', '25 ? 2' (square root)
------------------------------ Captured log call -------------------------------
DEBUG    calculator:calculator.py:55 User entered input: ans(1) + 2
ERROR    calculator:calculator.py:35 Failed to parse ans reference: No previous calculations available
WARNING  calculator:calculator.py:126 Invalid input: No previous calculations available
____________________________ test_invalid_operator _____________________________

mock_history = <MagicMock name='CalculationHistory()' id='138655696997072'>

    def test_invalid_operator(mock_history):
        with patch("app.calculator.history", mock_history):
>           with pytest.raises(OperationError, match="Unsupported operator @"):
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           Failed: DID NOT RAISE <class 'app.exceptions.OperationError'>

tests/test_calculator_with_mock.py:69: Failed
----------------------------- Captured stdout call -----------------------------
Invalid input: Unsupported operator @. Only +, -, --, *, /, %, /%, //, ^, ? allowed
Please use format: number operator number [operator number]..., where number can be a number or ans(n)
Supported operators: +, -, --, *, /, %, /%, //, ^, ?
Precedence groups: +,-,-- (group 1); *,/,%/%,// (group 2); ^,? (group 3)
Examples: '1 + 2 - 3', 'ans(1) * 2', 'ans + 5', '25 ? 2' (square root)
------------------------------ Captured log call -------------------------------
DEBUG    calculator:calculator.py:55 User entered input: 1 @ 2
DEBUG    calculator:calculator.py:69 Initial result: 1.0
WARNING  calculator:calculator.py:85 Unsupported operator detected: @
WARNING  calculator:calculator.py:126 Invalid input: Unsupported operator @. Only +, -, --, *, /, %, /%, //, ^, ? allowed
____________________________ test_mixed_precedence _____________________________

mock_history = <MagicMock name='CalculationHistory()' id='138655699806128'>

    def test_mixed_precedence(mock_history):
        with patch("app.calculator.history", mock_history):
>           with pytest.raises(OperationError, match="Mixed operator precedence not allowed"):
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           Failed: DID NOT RAISE <class 'app.exceptions.OperationError'>

tests/test_calculator_with_mock.py:74: Failed
----------------------------- Captured stdout call -----------------------------
Invalid input: Mixed operator precedence not allowed: Cannot use * (group 2) with group 1 operators
Please use format: number operator number [operator number]..., where number can be a number or ans(n)
Supported operators: +, -, --, *, /, %, /%, //, ^, ?
Precedence groups: +,-,-- (group 1); *,/,%/%,// (group 2); ^,? (group 3)
Examples: '1 + 2 - 3', 'ans(1) * 2', 'ans + 5', '25 ? 2' (square root)
------------------------------ Captured log call -------------------------------
DEBUG    calculator:calculator.py:55 User entered input: 1 + 2 * 3
DEBUG    calculator:calculator.py:69 Initial result: 1.0
DEBUG    calculator:calculator.py:90 Set precedence group to 1
DEBUG    calculator:calculator.py:101 Processing + 2.0
DEBUG    calculator:calculator.py:109 Current result: 3.0
WARNING  calculator:calculator.py:92 Mixed operator precedence detected: * (group 2) with group 1
WARNING  calculator:calculator.py:126 Invalid input: Mixed operator precedence not allowed: Cannot use * (group 2) with group 1 operators
_______________________ test_invalid_format_empty_input ________________________

mock_history = <MagicMock name='CalculationHistory()' id='138655699807472'>

    def test_invalid_format_empty_input(mock_history):
        with patch("app.calculator.history", mock_history):
>           with pytest.raises(CalculatorError, match="Invalid format"):
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           Failed: DID NOT RAISE <class 'app.exceptions.CalculatorError'>

tests/test_calculator_with_mock.py:79: Failed
----------------------------- Captured stdout call -----------------------------
Invalid input: Invalid format: Expected 'number operator number [operator number]...'
Please use format: number operator number [operator number]..., where number can be a number or ans(n)
Supported operators: +, -, --, *, /, %, /%, //, ^, ?
Precedence groups: +,-,-- (group 1); *,/,%/%,// (group 2); ^,? (group 3)
Examples: '1 + 2 - 3', 'ans(1) * 2', 'ans + 5', '25 ? 2' (square root)
------------------------------ Captured log call -------------------------------
DEBUG    calculator:calculator.py:55 User entered input: 1 +
ERROR    calculator:calculator.py:59 Invalid format: Expected 'number operator number [operator number]...'
WARNING  calculator:calculator.py:126 Invalid input: Invalid format: Expected 'number operator number [operator number]...'
___________________________ test_invalid_first_token ___________________________

mock_history = <MagicMock name='CalculationHistory()' id='138655696996064'>

    def test_invalid_first_token(mock_history):
        with patch("app.calculator.history", mock_history):
>           with pytest.raises(CalculatorError, match="Invalid command: Input must start with a number or ans"):
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           Failed: DID NOT RAISE <class 'app.exceptions.CalculatorError'>

tests/test_calculator_with_mock.py:84: Failed
----------------------------- Captured stdout call -----------------------------
Invalid input: Invalid format: First value must be a number or ans(n): could not convert string to float: 'abc'
Please use format: number operator number [operator number]..., where number can be a number or ans(n)
Supported operators: +, -, --, *, /, %, /%, //, ^, ?
Precedence groups: +,-,-- (group 1); *,/,%/%,// (group 2); ^,? (group 3)
Examples: '1 + 2 - 3', 'ans(1) * 2', 'ans + 5', '25 ? 2' (square root)
------------------------------ Captured log call -------------------------------
DEBUG    calculator:calculator.py:55 User entered input: abc + 2
ERROR    calculator:calculator.py:71 Invalid format: First value must be a number or ans(n), input abc + 2
WARNING  calculator:calculator.py:126 Invalid input: Invalid format: First value must be a number or ans(n): could not convert string to float: 'abc'
=============================== warnings summary ===============================
app/memento.py:59
app/memento.py:59
app/memento.py:59
tests/test_memento.py::test_load_history_invalid_json
  /home/loki/documents/coding/is601/midterm/app/memento.py:59: DeprecationWarning: The 'warn' method is deprecated, use 'warning' instead
    logger.warn(f"Invalid JSON in steps column: {s}, error: {str(e)}")

tests/test_calculator.py::test_load_history_failure
tests/test_calculator_with_mock.py::test_load_history_failure
  /home/loki/documents/coding/is601/midterm/app/history.py:63: DeprecationWarning: The 'warn' method is deprecated, use 'warning' instead
    logger.warn(f"Error loading history from {filename}: {str(e)}")

tests/test_calculator_with_mock.py::test_invalid_ans_reference
tests/test_calculator_with_mock.py::test_invalid_operator
tests/test_calculator_with_mock.py::test_mixed_precedence
tests/test_calculator_with_mock.py::test_invalid_format_empty_input
tests/test_calculator_with_mock.py::test_invalid_first_token
  /home/loki/documents/coding/is601/midterm/app/calculator.py:126: DeprecationWarning: The 'warn' method is deprecated, use 'warning' instead
    log.warn(f"Invalid input: {str(e)}")

tests/test_calculator_with_mock.py::test_invalid_operator
  /home/loki/documents/coding/is601/midterm/app/calculator.py:85: DeprecationWarning: The 'warn' method is deprecated, use 'warning' instead
    log.warn(f"Unsupported operator detected: {operator}")

tests/test_calculator_with_mock.py::test_mixed_precedence
  /home/loki/documents/coding/is601/midterm/app/calculator.py:92: DeprecationWarning: The 'warn' method is deprecated, use 'warning' instead
    log.warn(f"Mixed operator precedence detected: {operator} (group {current_group}) with group {precedence_group}")

tests/test_memento.py::test_save_calculation_group
tests/test_memento.py::test_save_calculation_group_permission_error
  /home/loki/documents/coding/is601/midterm/app/memento.py:80: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
    self.history = pd.concat([self.history, pd.DataFrame([group])], ignore_index=True)

tests/test_memento.py::test_load_history_missing_steps_column
  /home/loki/documents/coding/is601/midterm/app/memento.py:50: DeprecationWarning: The 'warn' method is deprecated, use 'warning' instead
    logger.warn(f"No 'steps' column in {self.history_file}; initialized with empty lists")

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================================ tests coverage ================================
_______________ coverage: platform linux, python 3.13.3-final-0 ________________

Name                 Stmts   Miss  Cover
----------------------------------------
app/__init__.py          0      0   100%
app/calculation.py      72     16    78%
app/calculator.py      175     83    53%
app/config.py            0      0   100%
app/exceptions.py        6      0   100%
app/history.py          53     34    36%
app/logger.py           58     18    69%
app/memento.py         131     64    51%
app/operations.py       45     20    56%
----------------------------------------
TOTAL                  540    235    56%
Coverage HTML written to dir htmlcov
=========================== short test summary info ============================
FAILED tests/test_calculator.py::test_calculate_expression - AssertionError: ...
FAILED tests/test_calculator.py::test_ans_reference - AssertionError: Expecte...
FAILED tests/test_calculator.py::test_invalid_ans_reference - Failed: DID NOT...
FAILED tests/test_calculator_with_mock.py::test_calculate_expression - Assert...
FAILED tests/test_calculator_with_mock.py::test_ans_reference - AssertionErro...
FAILED tests/test_calculator_with_mock.py::test_invalid_ans_reference - Faile...
FAILED tests/test_calculator_with_mock.py::test_invalid_operator - Failed: DI...
FAILED tests/test_calculator_with_mock.py::test_mixed_precedence - Failed: DI...
FAILED tests/test_calculator_with_mock.py::test_invalid_format_empty_input - ...
FAILED tests/test_calculator_with_mock.py::test_invalid_first_token - Failed:...
================== 10 failed, 11 passed, 16 warnings in 0.93s ==================
